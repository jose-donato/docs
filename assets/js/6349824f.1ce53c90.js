"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[32584],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>k});var n=a(67294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var u=n.createContext({}),d=function(t){var e=n.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=d(t.components);return n.createElement(u.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,u=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),p=d(a),k=l,c=p["".concat(u,".").concat(k)]||p[k]||m[k]||r;return a?n.createElement(c,i(i({ref:e},s),{},{components:a})):n.createElement(c,i({ref:e},s))}));function k(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=p;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},81935:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>u,default:()=>k,frontMatter:()=>o,metadata:()=>d,toc:()=>m});var n=a(87462),l=(a(67294),a(3905)),r=a(65099),i=a(85162);const o={title:"hrp",description:"OpenBB SDK Function"},u="hrp",d={unversionedId:"functions/portfolio/po/hrp",id:"functions/portfolio/po/hrp",title:"hrp",description:"OpenBB SDK Function",source:"@site/content/sdk/functions/portfolio/po/hrp.md",sourceDirName:"functions/portfolio/po",slug:"/functions/portfolio/po/hrp",permalink:"/sdk/functions/portfolio/po/hrp",draft:!1,tags:[],version:"current",frontMatter:{title:"hrp",description:"OpenBB SDK Function"},sidebar:"tutorialSidebar",previous:{title:"herc",permalink:"/sdk/functions/portfolio/po/herc"},next:{title:"load",permalink:"/sdk/functions/portfolio/po/load"}},s={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2},{value:"Parameters",id:"parameters-1",level:2},{value:"Returns",id:"returns-1",level:2},{value:"Examples",id:"examples-1",level:2}],p={toc:m};function k(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"hrp"},"hrp"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"model",label:"Model",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"Builds a hierarchical risk parity portfolio"),(0,l.kt)("p",null,"Source Code: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/OpenBBTerminal/tree/main/openbb_terminal/portfolio/portfolio_optimization/optimizer_model.py#L2275"},"link")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_hrp(symbols: List[str], interval: str, start_date: str, end_date: str, log_returns: bool, freq: str, maxnan: float, threshold: float, method: str, codependence: str, covariance: str, objective: str, risk_measure: str, risk_free_rate: float, risk_aversion: float, alpha: float, a_sim: int, beta: float, b_sim: int, linkage: str, k: int, max_k: int, bins_info: str, alpha_tail: float, leaf_order: bool, d_ewma: float, value: float) -> None\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"symbols"),(0,l.kt)("td",{parentName:"tr",align:null},"List","[str]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of portfolio tickers"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interval"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"interval to look at returns from"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"start_date"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"If not using interval, start date string (YYYY-MM-DD)"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"end_date"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"If not using interval, end date string (YYYY-MM-DD). If empty use last",(0,l.kt)("br",null),"weekday."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"log_returns"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"If True calculate log returns, else arithmetic returns. Default value",(0,l.kt)("br",null),"is False"),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"freq"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The frequency used to calculate returns. Default value is 'D'. Possible",(0,l.kt)("br",null),"values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'D' for daily returns.",(0,l.kt)("br",null),"- 'W' for weekly returns.",(0,l.kt)("br",null),"- 'M' for monthly returns."),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxnan"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Max percentage of nan values accepted per asset to be included in",(0,l.kt)("br",null),"returns."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"threshold"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Value used to replace outliers that are higher to threshold."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"method"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Method used to fill nan values. Default value is 'time'. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"interpolate <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html>"),"__."),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"codependence"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The codependence or similarity matrix used to build the distance",(0,l.kt)("br",null),"metric and clusters. The default is 'pearson'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'pearson': pearson correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D",(0,l.kt)("em",{parentName:"td"},"{i,j} = \\sqrt{0.5(1-\\rho^{pearson}"),"{i,j})}",(0,l.kt)("br",null),"- 'spearman': spearman correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D",(0,l.kt)("em",{parentName:"td"},"{i,j} = \\sqrt{0.5(1-\\rho^{spearman}"),"{i,j})}",(0,l.kt)("br",null),"- 'abs",(0,l.kt)("em",{parentName:"td"},"pearson': absolute value pearson correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D"),"{i,j} = \\sqrt{(1-"),(0,l.kt)("td",{parentName:"tr",align:null},"\\rho^{pearson}_{i,j}"),(0,l.kt)("td",{parentName:"tr",align:null},")}",(0,l.kt)("br",null),"- 'abs",(0,l.kt)("em",{parentName:"td"},"spearman': absolute value spearman correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D"),"{i,j} = \\sqrt{(1-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"covariance"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The method used to estimate the covariance matrix:",(0,l.kt)("br",null),"The default is 'hist'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'hist': use historical estimates.",(0,l.kt)("br",null),"- 'ewma1': use ewma with adjust=True. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"EWM <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html#exponentially-weighted-window>"),(0,l.kt)("strong",{parentName:"td"},".",(0,l.kt)("br",null),"- 'ewma2': use ewma with adjust=False. For more information see ",(0,l.kt)("inlineCode",{parentName:"strong"},"EWM <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html#exponentially-weighted-window>")),".",(0,l.kt)("br",null),"- 'ledoit': use the Ledoit and Wolf Shrinkage method.",(0,l.kt)("br",null),"- 'oas': use the Oracle Approximation Shrinkage method.",(0,l.kt)("br",null),"- 'shrunk': use the basic Shrunk Covariance method.",(0,l.kt)("br",null),"- 'gl': use the basic Graphical Lasso Covariance method.",(0,l.kt)("br",null),"- 'jlogo': use the j-LoGo Covariance method. For more information see: ",(0,l.kt)("inlineCode",{parentName:"td"},"c-jLogo"),".",(0,l.kt)("br",null),"- 'fixed': denoise using fixed method. For more information see chapter 2 of ",(0,l.kt)("inlineCode",{parentName:"td"},"c-MLforAM"),".",(0,l.kt)("br",null),"- 'spectral': denoise using spectral method. For more information see chapter 2 of ",(0,l.kt)("inlineCode",{parentName:"td"},"c-MLforAM"),".",(0,l.kt)("br",null),"- 'shrink': denoise using shrink method. For more information see chapter 2 of ",(0,l.kt)("inlineCode",{parentName:"td"},"c-MLforAM"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"objective"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Objective function used by the NCO model.",(0,l.kt)("br",null),"The default is 'MinRisk'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'MinRisk': Minimize the selected risk measure.",(0,l.kt)("br",null),"- 'Utility': Maximize the risk averse utility function.",(0,l.kt)("br",null),"- 'Sharpe': Maximize the risk adjusted return ratio based on the selected risk measure.",(0,l.kt)("br",null),"- 'ERC': Equally risk contribution portfolio of the selected risk measure."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"risk_measure"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The risk measure used to optimize the portfolio. If model is 'NCO',",(0,l.kt)("br",null),"the risk measures available depends on the objective function.",(0,l.kt)("br",null),"The default is 'MV'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'MV': Variance.",(0,l.kt)("br",null),"- 'MAD': Mean Absolute Deviation.",(0,l.kt)("br",null),"- 'MSV': Semi Standard Deviation.",(0,l.kt)("br",null),"- 'FLPM': First Lower Partial Moment (Omega Ratio).",(0,l.kt)("br",null),"- 'SLPM': Second Lower Partial Moment (Sortino Ratio).",(0,l.kt)("br",null),"- 'VaR': Value at Risk.",(0,l.kt)("br",null),"- 'CVaR': Conditional Value at Risk.",(0,l.kt)("br",null),"- 'TG': Tail Gini.",(0,l.kt)("br",null),"- 'EVaR': Entropic Value at Risk.",(0,l.kt)("br",null),"- 'WR': Worst Realization (Minimax).",(0,l.kt)("br",null),"- 'RG': Range of returns.",(0,l.kt)("br",null),"- 'CVRG': CVaR range of returns.",(0,l.kt)("br",null),"- 'TGRG': Tail Gini range of returns.",(0,l.kt)("br",null),"- 'MDD': Maximum Drawdown of uncompounded cumulative returns (Calmar Ratio).",(0,l.kt)("br",null),"- 'ADD': Average Drawdown of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'DaR': Drawdown at Risk of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'CDaR': Conditional Drawdown at Risk of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'EDaR': Entropic Drawdown at Risk of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'UCI': Ulcer Index of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'MDD_Rel': Maximum Drawdown of compounded cumulative returns (Calmar Ratio).",(0,l.kt)("br",null),"- 'ADD_Rel': Average Drawdown of compounded cumulative returns.",(0,l.kt)("br",null),"- 'DaR_Rel': Drawdown at Risk of compounded cumulative returns.",(0,l.kt)("br",null),"- 'CDaR_Rel': Conditional Drawdown at Risk of compounded cumulative returns.",(0,l.kt)("br",null),"- 'EDaR_Rel': Entropic Drawdown at Risk of compounded cumulative returns.",(0,l.kt)("br",null),"- 'UCI_Rel': Ulcer Index of compounded cumulative returns."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"risk_free_rate"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Risk free rate, must be in the same interval of assets returns.",(0,l.kt)("br",null),"Used for 'FLPM' and 'SLPM'. The default is 0."),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"risk_aversion"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Risk aversion factor of the 'Utility' objective function.",(0,l.kt)("br",null),"The default is 1."),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"alpha"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Significance level of VaR, CVaR, EDaR, DaR, CDaR, EDaR, Tail Gini of losses.",(0,l.kt)("br",null),"The default is 0.05."),(0,l.kt)("td",{parentName:"tr",align:null},"0.05"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"a_sim"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of CVaRs used to approximate Tail Gini of losses. The default is 100."),(0,l.kt)("td",{parentName:"tr",align:null},"100"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"beta"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Significance level of CVaR and Tail Gini of gains. If None it duplicates alpha value.",(0,l.kt)("br",null),"The default is None."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b_sim"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of CVaRs used to approximate Tail Gini of gains. If None it duplicates a_sim value.",(0,l.kt)("br",null),"The default is None."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"linkage"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Linkage method of hierarchical clustering. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"linkage <https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html>"),"__.",(0,l.kt)("br",null),"The default is 'single'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'single'.",(0,l.kt)("br",null),"- 'complete'.",(0,l.kt)("br",null),"- 'average'.",(0,l.kt)("br",null),"- 'weighted'.",(0,l.kt)("br",null),"- 'centroid'.",(0,l.kt)("br",null),"- 'median'.",(0,l.kt)("br",null),"- 'ward'.",(0,l.kt)("br",null),"- 'dbht': Direct Bubble Hierarchical Tree."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"k"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of clusters. This value is took instead of the optimal number",(0,l.kt)("br",null),"of clusters calculated with the two difference gap statistic.",(0,l.kt)("br",null),"The default is None."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max_k"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Max number of clusters used by the two difference gap statistic",(0,l.kt)("br",null),"to find the optimal number of clusters. The default is 10."),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bins_info"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of bins used to calculate variation of information. The default",(0,l.kt)("br",null),"value is 'KN'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'KN': Knuth's choice method. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"knuth_bin_width <https://docs.astropy.org/en/stable/api/astropy.stats.knuth_bin_width.html>"),(0,l.kt)("strong",{parentName:"td"},".",(0,l.kt)("br",null),"- 'FD': Freedman\u2013Diaconis' choice method. For more information see ",(0,l.kt)("inlineCode",{parentName:"strong"},"freedman_bin_width <https://docs.astropy.org/en/stable/api/astropy.stats.freedman_bin_width.html>")),".",(0,l.kt)("br",null),"- 'SC': Scotts' choice method. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"scott_bin_width <https://docs.astropy.org/en/stable/api/astropy.stats.scott_bin_width.html>"),"__.",(0,l.kt)("br",null),"- 'HGR': Hacine-Gharbi and Ravier' choice method."),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"alpha_tail"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Significance level for lower tail dependence index. The default is 0.05."),(0,l.kt)("td",{parentName:"tr",align:null},"0.05"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"leaf_order"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates if the cluster are ordered so that the distance between",(0,l.kt)("br",null),"successive leaves is minimal. The default is True."),(0,l.kt)("td",{parentName:"tr",align:null},"True"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"d"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"The smoothing factor of ewma methods.",(0,l.kt)("br",null),"The default is 0.94."),(0,l.kt)("td",{parentName:"tr",align:null},"0.94"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Amount to allocate to portfolio in long positions, by default 1.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1.0"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value_short"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Amount to allocate to portfolio in short positions, by default 0.0"),(0,l.kt)("td",{parentName:"tr",align:null},"0.0"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"True if plot table weights, by default False"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"True")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"returns"},"Returns"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tuple[Optional","[dict]",", pd.DataFrame]"),(0,l.kt)("td",{parentName:"tr",align:null},"Dictionary of portfolio weights,",(0,l.kt)("br",null),"DataFrame of stock returns.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("hr",null)),(0,l.kt)(i.Z,{value:"view",label:"View",mdxType:"TabItem"},(0,l.kt)("p",null,"Builds a hierarchical risk parity portfolio"),(0,l.kt)("p",null,"Source Code: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/OpenBB-finance/OpenBBTerminal/tree/main/openbb_terminal/portfolio/portfolio_optimization/optimizer_view.py#L2855"},"link")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def display_hrp(symbols: List[str], interval: str, start_date: str, end_date: str, log_returns: bool, freq: str, maxnan: float, threshold: float, method: str, codependence: str, covariance: str, risk_measure: str, risk_free_rate: float, risk_aversion: float, alpha: float, a_sim: int, beta: float, b_sim: int, linkage: str, k: int, max_k: int, bins_info: str, alpha_tail: float, leaf_order: bool, d_ewma: float, value: float, table: bool) -> None\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"symbols"),(0,l.kt)("td",{parentName:"tr",align:null},"List","[str]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of portfolio tickers"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interval"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"interval to look at returns from"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"start_date"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"If not using interval, start date string (YYYY-MM-DD)"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"end_date"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"If not using interval, end date string (YYYY-MM-DD). If empty use last",(0,l.kt)("br",null),"weekday."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"log_returns"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"If True calculate log returns, else arithmetic returns. Default value",(0,l.kt)("br",null),"is False"),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"freq"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The frequency used to calculate returns. Default value is 'D'. Possible",(0,l.kt)("br",null),"values are:",(0,l.kt)("br",null),"- 'D' for daily returns.",(0,l.kt)("br",null),"- 'W' for weekly returns.",(0,l.kt)("br",null),"- 'M' for monthly returns."),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxnan"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Max percentage of nan values accepted per asset to be included in",(0,l.kt)("br",null),"returns."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"threshold"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Value used to replace outliers that are higher to threshold."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"method"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Method used to fill nan values. Default value is 'time'. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"interpolate <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html>"),"__."),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"codependence"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The codependence or similarity matrix used to build the distance",(0,l.kt)("br",null),"metric and clusters. The default is 'pearson'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'pearson': pearson correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D",(0,l.kt)("em",{parentName:"td"},"{i,j} = \\sqrt{0.5(1-\\rho^{pearson}"),"{i,j})}.",(0,l.kt)("br",null),"- 'spearman': spearman correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D",(0,l.kt)("em",{parentName:"td"},"{i,j} = \\sqrt{0.5(1-\\rho^{spearman}"),"{i,j})}.",(0,l.kt)("br",null),"- 'abs",(0,l.kt)("em",{parentName:"td"},"pearson': absolute value pearson correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D"),"{i,j} = \\sqrt{(1-"),(0,l.kt)("td",{parentName:"tr",align:null},"\\rho^{pearson}_{i,j}"),(0,l.kt)("td",{parentName:"tr",align:null},")}.",(0,l.kt)("br",null),"- 'abs",(0,l.kt)("em",{parentName:"td"},"spearman': absolute value spearman correlation matrix. Distance formula:",(0,l.kt)("br",null),"    .. math:: D"),"{i,j} = \\sqrt{(1-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"covariance"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The method used to estimate the covariance matrix:",(0,l.kt)("br",null),"The default is 'hist'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'hist': use historical estimates.",(0,l.kt)("br",null),"- 'ewma1': use ewma with adjust=True. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"EWM <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html#exponentially-weighted-window>"),(0,l.kt)("strong",{parentName:"td"},".",(0,l.kt)("br",null),"- 'ewma2': use ewma with adjust=False. For more information see ",(0,l.kt)("inlineCode",{parentName:"strong"},"EWM <https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html#exponentially-weighted-window>")),".",(0,l.kt)("br",null),"- 'ledoit': use the Ledoit and Wolf Shrinkage method.",(0,l.kt)("br",null),"- 'oas': use the Oracle Approximation Shrinkage method.",(0,l.kt)("br",null),"- 'shrunk': use the basic Shrunk Covariance method.",(0,l.kt)("br",null),"- 'gl': use the basic Graphical Lasso Covariance method.",(0,l.kt)("br",null),"- 'jlogo': use the j-LoGo Covariance method. For more information see: ",(0,l.kt)("inlineCode",{parentName:"td"},"c-jLogo"),".",(0,l.kt)("br",null),"- 'fixed': denoise using fixed method. For more information see chapter 2 of ",(0,l.kt)("inlineCode",{parentName:"td"},"c-MLforAM"),".",(0,l.kt)("br",null),"- 'spectral': denoise using spectral method. For more information see chapter 2 of ",(0,l.kt)("inlineCode",{parentName:"td"},"c-MLforAM"),".",(0,l.kt)("br",null),"- 'shrink': denoise using shrink method. For more information see chapter 2 of ",(0,l.kt)("inlineCode",{parentName:"td"},"c-MLforAM"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"risk_measure"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"The risk measure used to optimize the portfolio. If model is 'NCO',",(0,l.kt)("br",null),"the risk measures available depends on the objective function.",(0,l.kt)("br",null),"The default is 'MV'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'MV': Variance.",(0,l.kt)("br",null),"- 'MAD': Mean Absolute Deviation.",(0,l.kt)("br",null),"- 'MSV': Semi Standard Deviation.",(0,l.kt)("br",null),"- 'FLPM': First Lower Partial Moment (Omega Ratio).",(0,l.kt)("br",null),"- 'SLPM': Second Lower Partial Moment (Sortino Ratio).",(0,l.kt)("br",null),"- 'VaR': Value at Risk.",(0,l.kt)("br",null),"- 'CVaR': Conditional Value at Risk.",(0,l.kt)("br",null),"- 'TG': Tail Gini.",(0,l.kt)("br",null),"- 'EVaR': Entropic Value at Risk.",(0,l.kt)("br",null),"- 'WR': Worst Realization (Minimax).",(0,l.kt)("br",null),"- 'RG': Range of returns.",(0,l.kt)("br",null),"- 'CVRG': CVaR range of returns.",(0,l.kt)("br",null),"- 'TGRG': Tail Gini range of returns.",(0,l.kt)("br",null),"- 'MDD': Maximum Drawdown of uncompounded cumulative returns (Calmar Ratio).",(0,l.kt)("br",null),"- 'ADD': Average Drawdown of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'DaR': Drawdown at Risk of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'CDaR': Conditional Drawdown at Risk of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'EDaR': Entropic Drawdown at Risk of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'UCI': Ulcer Index of uncompounded cumulative returns.",(0,l.kt)("br",null),"- 'MDD_Rel': Maximum Drawdown of compounded cumulative returns (Calmar Ratio).",(0,l.kt)("br",null),"- 'ADD_Rel': Average Drawdown of compounded cumulative returns.",(0,l.kt)("br",null),"- 'DaR_Rel': Drawdown at Risk of compounded cumulative returns.",(0,l.kt)("br",null),"- 'CDaR_Rel': Conditional Drawdown at Risk of compounded cumulative returns.",(0,l.kt)("br",null),"- 'EDaR_Rel': Entropic Drawdown at Risk of compounded cumulative returns.",(0,l.kt)("br",null),"- 'UCI_Rel': Ulcer Index of compounded cumulative returns."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"risk_free_rate"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Risk free rate, must be in the same interval of assets returns.",(0,l.kt)("br",null),"Used for 'FLPM' and 'SLPM'. The default is 0."),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"risk_aversion"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Risk aversion factor of the 'Utility' objective function.",(0,l.kt)("br",null),"The default is 1."),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"alpha"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Significance level of VaR, CVaR, EDaR, DaR, CDaR, EDaR, Tail Gini of losses.",(0,l.kt)("br",null),"The default is 0.05."),(0,l.kt)("td",{parentName:"tr",align:null},"0.05"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"a_sim"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of CVaRs used to approximate Tail Gini of losses. The default is 100."),(0,l.kt)("td",{parentName:"tr",align:null},"100"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"beta"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Significance level of CVaR and Tail Gini of gains. If None it duplicates alpha value.",(0,l.kt)("br",null),"The default is None."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b_sim"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of CVaRs used to approximate Tail Gini of gains. If None it duplicates a_sim value.",(0,l.kt)("br",null),"The default is None."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"linkage"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Linkage method of hierarchical clustering. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"linkage <https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html>"),"__.",(0,l.kt)("br",null),"The default is 'single'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'single'.",(0,l.kt)("br",null),"- 'complete'.",(0,l.kt)("br",null),"- 'average'.",(0,l.kt)("br",null),"- 'weighted'.",(0,l.kt)("br",null),"- 'centroid'.",(0,l.kt)("br",null),"- 'median'.",(0,l.kt)("br",null),"- 'ward'.",(0,l.kt)("br",null),"- 'dbht': Direct Bubble Hierarchical Tree."),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"k"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of clusters. This value is took instead of the optimal number",(0,l.kt)("br",null),"of clusters calculated with the two difference gap statistic.",(0,l.kt)("br",null),"The default is None."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max_k"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Max number of clusters used by the two difference gap statistic",(0,l.kt)("br",null),"to find the optimal number of clusters. The default is 10."),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bins_info"),(0,l.kt)("td",{parentName:"tr",align:null},"str"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of bins used to calculate variation of information. The default",(0,l.kt)("br",null),"value is 'KN'. Possible values are:",(0,l.kt)("br",null),(0,l.kt)("br",null),"- 'KN': Knuth's choice method. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"knuth_bin_width <https://docs.astropy.org/en/stable/api/astropy.stats.knuth_bin_width.html>"),(0,l.kt)("strong",{parentName:"td"},".",(0,l.kt)("br",null),"- 'FD': Freedman\u2013Diaconis' choice method. For more information see ",(0,l.kt)("inlineCode",{parentName:"strong"},"freedman_bin_width <https://docs.astropy.org/en/stable/api/astropy.stats.freedman_bin_width.html>")),".",(0,l.kt)("br",null),"- 'SC': Scotts' choice method. For more information see ",(0,l.kt)("inlineCode",{parentName:"td"},"scott_bin_width <https://docs.astropy.org/en/stable/api/astropy.stats.scott_bin_width.html>"),"__.",(0,l.kt)("br",null),"- 'HGR': Hacine-Gharbi and Ravier' choice method."),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"alpha_tail"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Significance level for lower tail dependence index. The default is 0.05."),(0,l.kt)("td",{parentName:"tr",align:null},"0.05"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"leaf_order"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates if the cluster are ordered so that the distance between",(0,l.kt)("br",null),"successive leaves is minimal. The default is True."),(0,l.kt)("td",{parentName:"tr",align:null},"True"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"d"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"The smoothing factor of ewma methods.",(0,l.kt)("br",null),"The default is 0.94."),(0,l.kt)("td",{parentName:"tr",align:null},"0.94"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Amount to allocate to portfolio in long positions, by default 1.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1.0"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value_short"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"Amount to allocate to portfolio in short positions, by default 0.0"),(0,l.kt)("td",{parentName:"tr",align:null},"0.0"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"True if plot table weights, by default False"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"True")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,"This function does not return anything"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"examples-1"},"Examples"),(0,l.kt)("hr",null))))}k.isMDXComponent=!0},85162:(t,e,a)=>{a.d(e,{Z:()=>i});var n=a(67294),l=a(86010);const r="tabItem_Ymn6";function i(t){let{children:e,hidden:a,className:i}=t;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:a},e)}},65099:(t,e,a)=>{a.d(e,{Z:()=>k});var n=a(87462),l=a(67294),r=a(86010),i=a(72389),o=a(67392),u=a(7094),d=a(12466);const s="tabItem_hGfb";var m=a(16550);function p(t){var e;const{lazy:a,block:i,defaultValue:p,values:k,groupId:c,className:b}=t,g=l.Children.map(t.children,(t=>{if((0,l.isValidElement)(t)&&"value"in t.props)return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=k??g.map((t=>{let{props:{value:e,label:a,attributes:n}}=t;return{value:e,label:a,attributes:n}})),f=(0,o.l)(N,((t,e)=>t.value===e.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===p?p:p??(null==(e=g.find((t=>t.props.default)))?void 0:e.props.value)??g[0].props.value;if(null!==h&&!N.some((t=>t.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${N.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,u.U)(),[T,w]=(0,l.useState)(h),D=[],{blockElementScrollPositionUntilNextRender:_}=(0,d.o5)();if(null!=c){const t=v[c];null!=t&&t!==T&&N.some((e=>e.value===t))&&w(t)}const R=t=>{const e=t.currentTarget,a=D.indexOf(e),n=N[a].value;n!==T&&(_(e),w(n),null!=c&&y(c,String(n)))},x=t=>{var e;let a=null;switch(t.key){case"Enter":R(t);break;case"ArrowRight":{const e=D.indexOf(t.currentTarget)+1;a=D[e]??D[0];break}case"ArrowLeft":{const e=D.indexOf(t.currentTarget)-1;a=D[e]??D[D.length-1];break}}null==(e=a)||e.focus()},{pathname:C}=(0,m.TH)();return l.createElement("div",null,l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("_group-tab list-none lg:-ml-7 my-6")},N.map((t=>{let{value:e,label:a,attributes:i}=t;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===e?0:-1,"aria-selected":T===e,key:e,ref:t=>D.push(t),onKeyDown:x,onClick:R},i,{className:(0,r.Z)("font-bold tracking-widest w-fit px-3 inline-flex py-1 uppercase text-sm border-b",s,null==i?void 0:i.className,{"border-b-2 pointer-events-none":T===e,"cursor-pointer":T!==e,"border-b-2 text-[#669dcb] border-[#669dcb]":T===e&&C.startsWith("/terminal"),"border-b-2 text-[#FB923C] border-[#FB923C]":T===e&&C.startsWith("/sdk"),"border-grey-600 text-grey-600 hover:text-[#ffd4b1] hover:border-[#ffd4b1]":T!==e&&C.startsWith("/sdk"),"border-grey-600 text-grey-600 hover:text-[#abd2f1] hover:border-[#abd2f1]":T!==e&&C.startsWith("/terminal")})}),a??e)})),l.createElement("li",{className:"w-full border-b border-grey-600 pointer-events-none py-1 mb-[9.5px]"})),a?(0,l.cloneElement)(g.filter((t=>t.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((t,e)=>(0,l.cloneElement)(t,{key:e,hidden:t.props.value!==T})))))}function k(t){const e=(0,i.Z)();return l.createElement(p,(0,n.Z)({key:String(e)},t))}}}]);